grammar ausim.xtext.kanban.domainmodel.Kanbanmodel with org.eclipse.xtext.common.Terminals

generate kanbanmodel "http://www.xtext.ausim/kanban/domainmodel/Kanbanmodel"

	KanbanSchedulingSystem:
		'KSSModel' name=ID
		
		'GovernanceModel'
		    ((Mechanisms +=Mechanism )+)?
			'TaskPatterns'
			(KSSTaskPatterns += TaskPattern)+
			(KSStaskPatternTypes += TaskType)+
			'end TaskPatterns'
		'end GovernanceModel'
		
		'OrganizationalModel'
			'ServiceTypes'
			(SoSServices += ServiceType)+
			'end ServiceTypes'
			'ServiceProviders'
			(orgUnits += ServiceProvider)+
			'end ServiceProviders'
		'end OrganizationalModel'
		
		'WorkItemNetworkModel'
			'WorkSources'
		    (kssSources += WorkSource)+
		    'end WorkSources'
		    'WorkItems'
			(kssWItems += WorkItem)+
			'end WorkItems'
	//		(kssWorkFlow=KanbanTaskModel)
		'end WorkItemNetworkModel'
		
		'end KSSModel'
	;
	


	// ------------------------ Governance Objects ---------------------------------
	TaskPattern:
		'workflowTemplate' name=ID '{'
		('Description' description=STRING)?
		('Types' '{' (taskpatternTypes+=[TaskType])+ '}')?
		'}'
	;
	TaskType :
		'taskType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;	
	
	Mechanism:
		'Mechanism' name=ID
		('Description' description=STRING)?
		('ProcessType' processtype=STRING)
		(Strategies+=Strategy)+
	;	
	
	Strategy:
		'Strategy' name=ID
		('Description' description=STRING)?
	    (WIAcceptance+=WIAcceptance)+
	    (WISelection+=WISelection)+ 
	    (WIAssignment+=WIAssignment)+ 
	    (ResourceAllocation+=ResourceAllocation)+ 
	    (ResourceOutsourcing+=ResourceOutsourcing)+    
	;
	
	
	WIAcceptance:
		'WIAcceptance' name=ID '{'
		('Description' description=STRING)?		
		('backlogQLimit' backlogQLimit=INT)?
		'}'
	;
	WISelection:
		'WISelection' name=ID '{'
		('Description' description=STRING)?
		('readyQLimit' readyQLimit=INT)?
		'}'
	;
	WIAssignment:
		'WIAssignment' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceAllocation:
		'ResourceAllocation' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceOutsourcing:
		'ResourceOutsorcing' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	
    // ------------------------ WorkItem Objects ---------------------------------
    WorkSource:
    	'workSource' name=ID '{'
    	('Description' description=STRING)?
    	'}'
    ;
//    WorkItemNetwork:
//    	'workItemNetwork' name=ID '{'
//    	('Description' description=STRING)?
//    	('workItems' '{' workItems+=WorkItem '}')
//    	'}'
//    ;
	WorkItem:
		'workItem' name=ID '{'
		('Description' description=STRING)?
		('Pattern' pattern=[TaskPattern])?		
		('Type' patternType=[TaskType])?
		('predecessors' '{' (pTasks+=[WorkItem])+ '}')?
		('subtasks' '{' (sTasks+=[WorkItem])+ '}')?
		('causality'(causalTriggers+=Causality)*)?
		('serviceType' (reqSpecialties+=[ServiceType])+)?
		('baseEfforts' befforts=INT)?
		('baseValue' bvalue=INT)?
		('classOfService' COS=ID)?
		('WorkSource' wItemSource=[WorkSource])?
		('arrivalTime' arrtime=INT)?
		('dueDate' duedate=INT)?
		'}'
	;
	Causality:
		('=>'| '->')'{'(triggered+=[WorkItem])+'}'
		('atProgress' tProgress=INT)?
		('onProbability' tProbability=INT)?		
	;
	
	// ------------------------ Organizational Objects ---------------------------------
	ServiceType:
		'serviceType' name=ID ('{'
		('Description' description=STRING)?
		'}')?
	;	
	Service:
		'service' name=ID ('{'
		('Description' description=STRING)?
		('type' serviceType=[ServiceType])
		('efficiency' efficiency=INT)?
		'}')?
	;	
	ServiceProvider:
		('serviceProvider'|'group') name=ID '{'
		('Description' description=STRING)?
		('sourceUnits' '{' (sourceUnits+=[ServiceProvider])+ '}')?
		('targetUnits' '{' (targetUnits+=[ServiceProvider])+ '}')?
		('subordinateUnits' '{' (subordinateUnits+=[ServiceProvider])+ '}')?
		('resources' '{' (resources+=Asset)+ '}')?
		('services' '{' (services+=Service)+ '}')?
		('governanceSearchStrategy' '{'
			(acceptanceRule=WIAcceptance)?
		    (selectionRule=WISelection)?
		    (assignmentRule=WIAssignment)?
		    (allocationRule=ResourceAllocation)?
		    (outsourcingRule=ResourceOutsourcing)?
	    	'}')?
	    '}'
	;
	Asset: 
		'resource' name=ID '{'
		('Description' description=STRING)?
		'skills' '{' (hasSkills+=Skill)+ '}'
		'}'
	;	
	Skill:
		name=ID ('{'
		('Description' description=STRING)?
		'}')?
	;
	
	
	// ------------------------ (Reserved Objects) ---------------------------------
	KanbanTaskModel:
		'WorkFlow' name=ID
		(caps+=Capability)+
		'end WorkFlow'
	;
	Capability:
		'capability' name=ID '{'
		('Description' description=STRING)?
		(reqs+=Requirement)+ 	
		'}'
	;
	Requirement:
		'requirement' name=ID '{' 
		 ('Description' description=STRING)?
		 ('workItems' '{' (rTasks+=[WorkItem])+ '}') 
		 ('workItemNetwork' (dependencies += Causality)*)?
		'}'
	;
	
	Entity:
		'entity' name=ID '{'
		('ServiceDirectory' sdname=ID '=' '['(serviceProvisions+=Provision)* ']')?
		(entityBehavior=Statemachine)
		'}'
	;
	
	Provision:
		'(' serviceName=[ServiceType] ',' '{'(providers+=[ServiceProvider])* '}'')' 
	;
	
	
	Statemachine :
     {Statemachine}
	('events' 
		events+=Event+ 
	'end')?
	('activities' 
		commands+=Command+ 
	'end')?
	(states+=State)*
;

Event:
	name=ID code=ID
;

Command:
	name=ID code=ID
;

State:
	'state' name=ID
		('actions' '{' actions+=[Command]+ '}')?
		(transitions+=Transition)*
	'end'
;

Transition:
	(event=[Event] '=>' state=[State]) | (event=[Event] '/' '[' (eventactions+=[Command])+ ']' '=>' state=[State])
;
	