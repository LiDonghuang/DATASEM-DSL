/*
 * generated by Xtext
 */
package datasem.xtext.kanban.domainmodel.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Asset;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Capability;
import datasem.xtext.kanban.domainmodel.kanbanmodel.CausalTrigger;
import datasem.xtext.kanban.domainmodel.kanbanmodel.ClassOfService;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Command;
import datasem.xtext.kanban.domainmodel.kanbanmodel.ConditionType;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Distribution;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Entity;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Event;
import datasem.xtext.kanban.domainmodel.kanbanmodel.EventType;
import datasem.xtext.kanban.domainmodel.kanbanmodel.GovernanceStrategy;
import datasem.xtext.kanban.domainmodel.kanbanmodel.KanbanSchedulingSystem;
import datasem.xtext.kanban.domainmodel.kanbanmodel.KanbanTaskModel;
import datasem.xtext.kanban.domainmodel.kanbanmodel.KanbanmodelPackage;
import datasem.xtext.kanban.domainmodel.kanbanmodel.LocalValue;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Mechanism;
import datasem.xtext.kanban.domainmodel.kanbanmodel.MechanismAttribute;
import datasem.xtext.kanban.domainmodel.kanbanmodel.NumExpression;
import datasem.xtext.kanban.domainmodel.kanbanmodel.ProcessModel;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Provision;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Repository;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Requirement;
import datasem.xtext.kanban.domainmodel.kanbanmodel.ResourceAllocation;
import datasem.xtext.kanban.domainmodel.kanbanmodel.ResourceAllocationRuleType;
import datasem.xtext.kanban.domainmodel.kanbanmodel.ResourceOutsourcing;
import datasem.xtext.kanban.domainmodel.kanbanmodel.ResourceOutsourcingRuleType;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Service;
import datasem.xtext.kanban.domainmodel.kanbanmodel.ServiceProvider;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Skill;
import datasem.xtext.kanban.domainmodel.kanbanmodel.State;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Statemachine;
import datasem.xtext.kanban.domainmodel.kanbanmodel.TaskHierarchy;
import datasem.xtext.kanban.domainmodel.kanbanmodel.TaskType;
import datasem.xtext.kanban.domainmodel.kanbanmodel.Transition;
import datasem.xtext.kanban.domainmodel.kanbanmodel.ValueFunction;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WIAcceptance;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WIAcceptanceRuleType;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WIAssignment;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WIAssignmentRuleType;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WISelection;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WISelectionRuleType;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WorkCausality;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WorkDecomposition;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WorkItem;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WorkItemNetwork;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WorkItemProfile;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WorkPrecedency;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WorkReference;
import datasem.xtext.kanban.domainmodel.kanbanmodel.WorkSource;
import datasem.xtext.kanban.domainmodel.services.KanbanmodelGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class KanbanmodelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KanbanmodelGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == KanbanmodelPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case KanbanmodelPackage.ASSET:
				sequence_Asset(context, (Asset) semanticObject); 
				return; 
			case KanbanmodelPackage.CAPABILITY:
				sequence_Capability(context, (Capability) semanticObject); 
				return; 
			case KanbanmodelPackage.CAUSAL_TRIGGER:
				sequence_CausalTrigger(context, (CausalTrigger) semanticObject); 
				return; 
			case KanbanmodelPackage.CLASS_OF_SERVICE:
				sequence_ClassOfService(context, (ClassOfService) semanticObject); 
				return; 
			case KanbanmodelPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case KanbanmodelPackage.CONDITION_TYPE:
				sequence_ConditionType(context, (ConditionType) semanticObject); 
				return; 
			case KanbanmodelPackage.DISTRIBUTION:
				sequence_Distribution(context, (Distribution) semanticObject); 
				return; 
			case KanbanmodelPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case KanbanmodelPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case KanbanmodelPackage.EVENT_TYPE:
				sequence_EventType(context, (EventType) semanticObject); 
				return; 
			case KanbanmodelPackage.GOVERNANCE_STRATEGY:
				sequence_GovernanceStrategy(context, (GovernanceStrategy) semanticObject); 
				return; 
			case KanbanmodelPackage.KANBAN_SCHEDULING_SYSTEM:
				sequence_KanbanSchedulingSystem(context, (KanbanSchedulingSystem) semanticObject); 
				return; 
			case KanbanmodelPackage.KANBAN_TASK_MODEL:
				sequence_KanbanTaskModel(context, (KanbanTaskModel) semanticObject); 
				return; 
			case KanbanmodelPackage.LOCAL_VALUE:
				sequence_LocalValue(context, (LocalValue) semanticObject); 
				return; 
			case KanbanmodelPackage.MECHANISM:
				sequence_Mechanism(context, (Mechanism) semanticObject); 
				return; 
			case KanbanmodelPackage.MECHANISM_ATTRIBUTE:
				sequence_MechanismAttribute(context, (MechanismAttribute) semanticObject); 
				return; 
			case KanbanmodelPackage.NUM_EXPRESSION:
				sequence_NumExpression(context, (NumExpression) semanticObject); 
				return; 
			case KanbanmodelPackage.PROCESS_MODEL:
				sequence_ProcessModel(context, (ProcessModel) semanticObject); 
				return; 
			case KanbanmodelPackage.PROVISION:
				sequence_Provision(context, (Provision) semanticObject); 
				return; 
			case KanbanmodelPackage.REPOSITORY:
				sequence_Repository(context, (Repository) semanticObject); 
				return; 
			case KanbanmodelPackage.REQUIREMENT:
				sequence_Requirement(context, (Requirement) semanticObject); 
				return; 
			case KanbanmodelPackage.RESOURCE_ALLOCATION:
				sequence_ResourceAllocation(context, (ResourceAllocation) semanticObject); 
				return; 
			case KanbanmodelPackage.RESOURCE_ALLOCATION_RULE_TYPE:
				sequence_ResourceAllocationRuleType(context, (ResourceAllocationRuleType) semanticObject); 
				return; 
			case KanbanmodelPackage.RESOURCE_OUTSOURCING:
				sequence_ResourceOutsourcing(context, (ResourceOutsourcing) semanticObject); 
				return; 
			case KanbanmodelPackage.RESOURCE_OUTSOURCING_RULE_TYPE:
				sequence_ResourceOutsourcingRuleType(context, (ResourceOutsourcingRuleType) semanticObject); 
				return; 
			case KanbanmodelPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case KanbanmodelPackage.SERVICE_PROVIDER:
				sequence_ServiceProvider(context, (ServiceProvider) semanticObject); 
				return; 
			case KanbanmodelPackage.SKILL:
				sequence_Skill(context, (Skill) semanticObject); 
				return; 
			case KanbanmodelPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case KanbanmodelPackage.STATEMACHINE:
				sequence_Statemachine(context, (Statemachine) semanticObject); 
				return; 
			case KanbanmodelPackage.TASK_HIERARCHY:
				sequence_TaskHierarchy(context, (TaskHierarchy) semanticObject); 
				return; 
			case KanbanmodelPackage.TASK_TYPE:
				sequence_TaskType(context, (TaskType) semanticObject); 
				return; 
			case KanbanmodelPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case KanbanmodelPackage.VALUE_FUNCTION:
				sequence_ValueFunction(context, (ValueFunction) semanticObject); 
				return; 
			case KanbanmodelPackage.WI_ACCEPTANCE:
				sequence_WIAcceptance(context, (WIAcceptance) semanticObject); 
				return; 
			case KanbanmodelPackage.WI_ACCEPTANCE_RULE_TYPE:
				sequence_WIAcceptanceRuleType(context, (WIAcceptanceRuleType) semanticObject); 
				return; 
			case KanbanmodelPackage.WI_ASSIGNMENT:
				sequence_WIAssignment(context, (WIAssignment) semanticObject); 
				return; 
			case KanbanmodelPackage.WI_ASSIGNMENT_RULE_TYPE:
				sequence_WIAssignmentRuleType(context, (WIAssignmentRuleType) semanticObject); 
				return; 
			case KanbanmodelPackage.WI_SELECTION:
				sequence_WISelection(context, (WISelection) semanticObject); 
				return; 
			case KanbanmodelPackage.WI_SELECTION_RULE_TYPE:
				sequence_WISelectionRuleType(context, (WISelectionRuleType) semanticObject); 
				return; 
			case KanbanmodelPackage.WORK_CAUSALITY:
				sequence_WorkCausality(context, (WorkCausality) semanticObject); 
				return; 
			case KanbanmodelPackage.WORK_DECOMPOSITION:
				sequence_WorkDecomposition(context, (WorkDecomposition) semanticObject); 
				return; 
			case KanbanmodelPackage.WORK_ITEM:
				sequence_WorkItem(context, (WorkItem) semanticObject); 
				return; 
			case KanbanmodelPackage.WORK_ITEM_NETWORK:
				sequence_WorkItemNetwork(context, (WorkItemNetwork) semanticObject); 
				return; 
			case KanbanmodelPackage.WORK_ITEM_PROFILE:
				sequence_WorkItemProfile(context, (WorkItemProfile) semanticObject); 
				return; 
			case KanbanmodelPackage.WORK_PRECEDENCY:
				sequence_WorkPrecedency(context, (WorkPrecedency) semanticObject); 
				return; 
			case KanbanmodelPackage.WORK_REFERENCE:
				sequence_WorkReference(context, (WorkReference) semanticObject); 
				return; 
			case KanbanmodelPackage.WORK_SOURCE:
				sequence_WorkSource(context, (WorkSource) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING? skillSet+=Skill*)
	 */
	protected void sequence_Asset(EObject context, Asset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING? reqs+=Requirement+)
	 */
	protected void sequence_Capability(EObject context, Capability semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (triggered+=[WorkItem|ID]+ atProgress=INT? onProbability=INT?)
	 */
	protected void sequence_CausalTrigger(EObject context, CausalTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_ClassOfService(EObject context, ClassOfService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID code=ID)
	 */
	protected void sequence_Command(EObject context, Command semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.COMMAND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.COMMAND__NAME));
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.COMMAND__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.COMMAND__CODE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCommandAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCommandAccess().getCodeIDTerminalRuleCall_1_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_ConditionType(EObject context, ConditionType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=ID parameters+=Parameter*)
	 */
	protected void sequence_Distribution(EObject context, Distribution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID (sdname=ID serviceProvisions+=Provision*)? entityBehavior=Statemachine)
	 */
	protected void sequence_Entity(EObject context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_EventType(EObject context, EventType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID code=ID)
	 */
	protected void sequence_Event(EObject context, Event semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.EVENT__NAME));
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.EVENT__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.EVENT__CODE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventAccess().getCodeIDTerminalRuleCall_1_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         WIAcceptanceRule=WIAcceptance 
	 *         WISelectionRule=WISelection 
	 *         WIAssignmentRule=WIAssignment 
	 *         ResourceAllocationRule=ResourceAllocation 
	 *         ResourceOutsourcingRule=ResourceOutsourcing 
	 *         Mechanisms+=Mechanism?
	 *     )
	 */
	protected void sequence_GovernanceStrategy(EObject context, GovernanceStrategy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         EventTypes+=EventType+ 
	 *         ConditionTypes+=ConditionType+ 
	 *         WIAcceptanceRuleTypes+=WIAcceptanceRuleType+ 
	 *         WISelectionRuleTypes+=WISelectionRuleType+ 
	 *         WIAssignmentRuleTypes+=WIAssignmentRuleType+ 
	 *         ResourceAllocationRuleTypes+=ResourceAllocationRuleType+ 
	 *         ResourceOutsourcingRuleTypes+=ResourceOutsourcingRuleType+ 
	 *         ProcessModels+=ProcessModel+ 
	 *         ValueFunctions+=ValueFunction+ 
	 *         TaskTypes+=TaskType+ 
	 *         TaskHierarchy=TaskHierarchy 
	 *         ClassOfServices+=ClassOfService+ 
	 *         Services+=Service+ 
	 *         GovernanceStrategies+=GovernanceStrategy+ 
	 *         Repositories+=Repository* 
	 *         name=ID 
	 *         Path=QualifiedName? 
	 *         ServiceProviders+=ServiceProvider+ 
	 *         WorkSources+=WorkSource+ 
	 *         WorkItemNetworks+=WorkItemNetwork+ 
	 *         replications=INT 
	 *         interArrivalTime=INT
	 *     )
	 */
	protected void sequence_KanbanSchedulingSystem(EObject context, KanbanSchedulingSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID caps+=Capability+)
	 */
	protected void sequence_KanbanTaskModel(EObject context, KanbanTaskModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (owner=[ServiceProvider|ID] value=INT)
	 */
	protected void sequence_LocalValue(EObject context, LocalValue semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.LOCAL_VALUE__OWNER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.LOCAL_VALUE__OWNER));
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.LOCAL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.LOCAL_VALUE__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getLocalValueAccess().getOwnerServiceProviderIDTerminalRuleCall_0_1_0_1(), semanticObject.getOwner());
		feeder.accept(grammarAccess.getLocalValueAccess().getValueINTTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (attribute=STRING value=Parameter)
	 */
	protected void sequence_MechanismAttribute(EObject context, MechanismAttribute semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.MECHANISM_ATTRIBUTE__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.MECHANISM_ATTRIBUTE__ATTRIBUTE));
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.MECHANISM_ATTRIBUTE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.MECHANISM_ATTRIBUTE__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMechanismAttributeAccess().getAttributeSTRINGTerminalRuleCall_0_0(), semanticObject.getAttribute());
		feeder.accept(grammarAccess.getMechanismAttributeAccess().getValueParameterParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID value=Parameter description=STRING? mechanismAttributes+=MechanismAttribute+)
	 */
	protected void sequence_Mechanism(EObject context, Mechanism semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (numValue=Double? (distribution?='Distribution:' numDist=Distribution)?)
	 */
	protected void sequence_NumExpression(EObject context, NumExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_ProcessModel(EObject context, ProcessModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (serviceName=[Service|ID] providers+=[ServiceProvider|ID]*)
	 */
	protected void sequence_Provision(EObject context, Provision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[TaskType|ID] profiles+=WorkItemProfile*)
	 */
	protected void sequence_Repository(EObject context, Repository semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING? rTasks+=[WorkItem|ID]+ dependencies+=CausalTrigger*)
	 */
	protected void sequence_Requirement(EObject context, Requirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_ResourceAllocationRuleType(EObject context, ResourceAllocationRuleType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[ResourceAllocationRuleType|ID] description=STRING?)
	 */
	protected void sequence_ResourceAllocation(EObject context, ResourceAllocation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_ResourceOutsourcingRuleType(EObject context, ResourceOutsourcingRuleType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[ResourceOutsourcingRuleType|ID] description=STRING?)
	 */
	protected void sequence_ResourceOutsourcing(EObject context, ResourceOutsourcing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         assignTo+=[ServiceProvider|ID]* 
	 *         outsourceFrom+=[ServiceProvider|ID]* 
	 *         teamService=[Service|ID] 
	 *         governanceStrategy=[GovernanceStrategy|ID]? 
	 *         resources+=Asset*
	 *     )
	 */
	protected void sequence_ServiceProvider(EObject context, ServiceProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_Service(EObject context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (service=[Service|ID] efficiency=Double)
	 */
	protected void sequence_Skill(EObject context, Skill semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.SKILL__SERVICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.SKILL__SERVICE));
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.SKILL__EFFICIENCY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.SKILL__EFFICIENCY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSkillAccess().getServiceServiceIDTerminalRuleCall_1_0_1(), semanticObject.getService());
		feeder.accept(grammarAccess.getSkillAccess().getEfficiencyDoubleParserRuleCall_3_0(), semanticObject.getEfficiency());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID actions+=[Command|ID]* transitions+=Transition*)
	 */
	protected void sequence_State(EObject context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (events+=Event* commands+=Command* states+=State*)
	 */
	protected void sequence_Statemachine(EObject context, Statemachine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING? taskTypes+=[TaskType|ID]*)
	 */
	protected void sequence_TaskHierarchy(EObject context, TaskHierarchy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_TaskType(EObject context, TaskType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((event=[Event|ID] state=[State|ID]) | (event=[Event|ID] eventactions+=[Command|ID]+ state=[State|ID]))
	 */
	protected void sequence_Transition(EObject context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_ValueFunction(EObject context, ValueFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_WIAcceptanceRuleType(EObject context, WIAcceptanceRuleType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[WIAcceptanceRuleType|ID] description=STRING? backlogQLimit=INT? readyQLimit=INT?)
	 */
	protected void sequence_WIAcceptance(EObject context, WIAcceptance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_WIAssignmentRuleType(EObject context, WIAssignmentRuleType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[WIAssignmentRuleType|ID] description=STRING?)
	 */
	protected void sequence_WIAssignment(EObject context, WIAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_WISelectionRuleType(EObject context, WISelectionRuleType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[WISelectionRuleType|ID] description=STRING?)
	 */
	protected void sequence_WISelection(EObject context, WISelection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     workItem=[WorkItemProfile|ID]
	 */
	protected void sequence_WorkCausality(EObject context, WorkCausality semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.WORK_CAUSALITY__WORK_ITEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.WORK_CAUSALITY__WORK_ITEM));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getWorkCausalityAccess().getWorkItemWorkItemProfileIDTerminalRuleCall_1_0_1(), semanticObject.getWorkItem());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (workItem=[WorkItemProfile|ID] quantity=NumExpression)
	 */
	protected void sequence_WorkDecomposition(EObject context, WorkDecomposition semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.WORK_DECOMPOSITION__WORK_ITEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.WORK_DECOMPOSITION__WORK_ITEM));
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.WORK_DECOMPOSITION__QUANTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.WORK_DECOMPOSITION__QUANTITY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getWorkDecompositionAccess().getWorkItemWorkItemProfileIDTerminalRuleCall_1_0_1(), semanticObject.getWorkItem());
		feeder.accept(grammarAccess.getWorkDecompositionAccess().getQuantityNumExpressionParserRuleCall_3_0(), semanticObject.getQuantity());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING? workItems+=WorkItem+)
	 */
	protected void sequence_WorkItemNetwork(EObject context, WorkItemNetwork semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         processModel=[ProcessModel|ID]? 
	 *         references+=WorkReference* 
	 *         decompositions+=WorkDecomposition* 
	 *         requiredServices+=[Service|ID]* 
	 *         efforts=NumExpression? 
	 *         value=NumExpression? 
	 *         classOfService=[ClassOfService|ID]? 
	 *         allowAssignment?='AssignmentAllowed'? 
	 *         allowDiscard?='DiscardAllowed'?
	 *     )
	 */
	protected void sequence_WorkItemProfile(EObject context, WorkItemProfile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         profile=[WorkItemProfile|ID]? 
	 *         description=STRING? 
	 *         type=[TaskType|ID]? 
	 *         pTasks+=[WorkItem|ID]* 
	 *         sTasks+=[WorkItem|ID]* 
	 *         causalTriggers+=CausalTrigger* 
	 *         requiredServices+=[Service|ID]* 
	 *         efforts=INT? 
	 *         value=INT? 
	 *         classOfService=[ClassOfService|ID]? 
	 *         workSource=[WorkSource|ID]? 
	 *         arrivalTime=INT? 
	 *         dueDate=INT?
	 *     )
	 */
	protected void sequence_WorkItem(EObject context, WorkItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     workItem=[WorkItemProfile|ID]
	 */
	protected void sequence_WorkPrecedency(EObject context, WorkPrecedency semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.WORK_PRECEDENCY__WORK_ITEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.WORK_PRECEDENCY__WORK_ITEM));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getWorkPrecedencyAccess().getWorkItemWorkItemProfileIDTerminalRuleCall_1_0_1(), semanticObject.getWorkItem());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (workItem=[WorkItemProfile|ID] quantity=NumExpression)
	 */
	protected void sequence_WorkReference(EObject context, WorkReference semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.WORK_REFERENCE__WORK_ITEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.WORK_REFERENCE__WORK_ITEM));
			if(transientValues.isValueTransient(semanticObject, KanbanmodelPackage.Literals.WORK_REFERENCE__QUANTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KanbanmodelPackage.Literals.WORK_REFERENCE__QUANTITY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getWorkReferenceAccess().getWorkItemWorkItemProfileIDTerminalRuleCall_1_0_1(), semanticObject.getWorkItem());
		feeder.accept(grammarAccess.getWorkReferenceAccess().getQuantityNumExpressionParserRuleCall_3_0(), semanticObject.getQuantity());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING? assignTo+=[ServiceProvider|ID]* assignmentRule=WIAssignment?)
	 */
	protected void sequence_WorkSource(EObject context, WorkSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
