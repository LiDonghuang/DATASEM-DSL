grammar datasem.xtext.kanban.domainmodel.Kanbanmodel with org.eclipse.xtext.common.Terminals

generate kanbanmodel "http://www.xtext.datasem/kanban/domainmodel/Kanbanmodel"

	KanbanSchedulingSystem:		
		'ReservedLibraries' '{'
			'EventTypes'
				(EventTypes += EventType)+
			'end EventTypes'
			'ConditionTypes'
				(ConditionTypes += ConditionType)+
			'end ConditionTypes'
			'GovernanceLibrary' 
				'WIAcceptanceRuleTypes'
				(WIAcceptanceRuleTypes += WIAcceptanceRuleType)+
				'end WIAcceptanceRuleTypes'
				'WISelectionRuleTypes'
				(WISelectionRuleTypes += WISelectionRuleType)+
				'end WISelectionRuleTypes'
				'WIAssignmentRuleTypes'
				(WIAssignmentRuleTypes += WIAssignmentRuleType)+
				'end WIAssignmentRuleTypes'
				'ResourceAllocationRuleTypes'
				(ResourceAllocationRuleTypes += ResourceAllocationRuleType)+
				'end ResourceAllocationRuleTypes'
				'ResourceOutsourcingRuleTypes'
				(ResourceOutsourcingRuleTypes += ResourceOutsourcingRuleType)+
				'end ResourceOutsourcingRuleTypes'		
			'end GovernanceLibrary'
			'TaskLibrary' 
				'ProcessModels'
				(ProcessModels += ProcessModel)+
				'end ProcessModels'		    			
				'ValueFunctions'
				(ValueFunctions += ValueFunction)+
				'end ValueFunctions'			
			'end TaskLibrary' 
		'}'
		
		'UserLibraries' '{'
			'TaskPattern'
			(TaskTypes += TaskType)+
			TaskHierarchy = TaskHierarchy			
			'end TaskPattern'
			'ClassOfServices'
			(ClassOfServices += ClassOfService)+
			'end ClassOfServices'
			'Services'
			(Services += Service)+
			'end Services'
			'GovernanceStrategies'
		    (GovernanceStrategies += GovernanceStrategy)+
		    'end GovernanceStrategies'
		    ('Repositories'
			(Repositories += Repository)+
			'end Repositories')?	    
		'}'
		
		'KSSModel' name=ID
			('Path' Path = QualifiedName)?	
			'OrganizationalModel'			
				'ServiceProviders'
				(ServiceProviders += ServiceProvider)+
				'end ServiceProviders'
			'end OrganizationalModel'	
			'WorkItemNetworkModel'			
				'WorkSources'
			    (WorkSources += WorkSource)+
			    'end WorkSources'
			    'WorkItemNetworks'
				(WorkItemNetworks += WorkItemNetwork)+
				'end WorkItemNetworks'
		//		(kssWorkFlow=KanbanTaskModel)
			'end WorkItemNetworkModel'
		'end KSSModel'
		
		'ExperimentSettings'
			'Replications' replications=INT
			'InterArrivalTime' interArrivalTime=INT	
		'end ExperimentSettings'	
	;
	

	//
	QualifiedName:
		ID ('.' ID)*
	;
	Double:
		INT ('.' INT)?
	;
	NumExpression:		
		(numValue=Double)?	
		(distribution ?= 'Distribution:' numDist = Distribution)?
	;
	Parameter:
		Double|ID
	;
	Distribution:
		type = ID
		'['
		(parameters+=Parameter)*
		']'
	;
	EventType:
		'EventType' name = ID
		(description=STRING)?
	;
	ConditionType:
		'ConditionType' name = ID
		(description=STRING)?
	;
	// ------------------------ Governance Objects ---------------------------------
	GovernanceStrategy: 
		'GovernanceStrategy' name=ID '{'
		('Description' description=STRING)?
	   	WIAcceptanceRule=WIAcceptance
	    WISelectionRule=WISelection 
	    WIAssignmentRule=WIAssignment 
	    ResourceAllocationRule=ResourceAllocation 
	    ResourceOutsourcingRule=ResourceOutsourcing
	    ((Mechanisms += Mechanism)+)?
	    '}'
	;
	WIAcceptance:
		'WIAcceptance' type=[WIAcceptanceRuleType] '{'
		('Description' description=STRING)?		
		('BackLogLimit' backlogQLimit=INT)?
		('WIPLimit' readyQLimit=INT)?
		'}'
	;
	WISelection:
		'WISelection' type=[WISelectionRuleType] '{'
		('Description' description=STRING)?		
		'}'
	;
	WIAssignment:
		'WIAssignment' type=[WIAssignmentRuleType] '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceAllocation:
		'ResourceAllocation' type=[ResourceAllocationRuleType] '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceOutsourcing:
		'ResourceOutsourcing' type=[ResourceOutsourcingRuleType] '{'
		('Description' description=STRING)?
		'}'
	;
	WIAcceptanceRuleType:
		'RuleType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	WISelectionRuleType:
		'RuleType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	WIAssignmentRuleType:
		'RuleType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceAllocationRuleType:
		'RuleType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceOutsourcingRuleType:
		'RuleType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	Mechanism:
		'Mechanism' name=ID'='value=Parameter
		'{'
		('Description' description=STRING)?
		'Attributes' '{' (mechanismAttributes+=MechanismAttribute)+ '}'
		'}'
	;	
	MechanismAttribute:
		attribute=STRING'='value=Parameter
	;	
    // ------------------------ WorkItem Objects ---------------------------------
    WorkSource:
    	'WorkSource' name=ID '{'
    	('Description' description=STRING)?
    	('AssignTo' '{' (assignTo+=[ServiceProvider])+ '}')?
    	(assignmentRule=WIAssignment)?
    	'}'
    ;
	WorkItemNetwork:
    	'WorkItemNetwork' name=ID '{'
    	('Description' description=STRING)?
    	'WorkItems' '{' (workItems+=WorkItem)+ '}'
    	'}'
    ;    
	WorkItem:
		'WorkItem' name=ID '{'
		('Profile' profile=[WorkItemProfile])?
		('Description' description=STRING)?	
		('Type' type=[TaskType])?
		('Predecessors' '{' (pTasks+=[WorkItem])+ '}')?
		('Subtasks' '{' (sTasks+=[WorkItem])+ '}')?
		('CausalTriggers'(causalTriggers+=CausalTrigger)*)?
		('RequiredServices' '{'(requiredServices+=[Service])+)?'}'
		('Efforts' efforts=INT)?
		('Value' value=INT)?
		('ClassOfService' classOfService=[ClassOfService])?
		('WorkSource' workSource=[WorkSource])?
		('ArrivalTime' arrivalTime=INT)?
		('DueDate' dueDate=INT)?
		'}'
	;
	CausalTrigger:
		('=>'| '->')'{'(triggered+=[WorkItem])+'}'
		('AtProgress' atProgress=INT)?
		('OnProbability' onProbability=INT)?		
	;
	TaskHierarchy:
		'TaskHierarchy' name=ID '{'
		('Description' description=STRING)?
		('Types' '{' (taskTypes+=[TaskType])+ '}')?
		'}'
	;
	TaskType:
		'TaskType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;	
	ValueFunction:
		'ValueFunction' name=ID '{'
		('Description' description=STRING)?
		'}'
	;	
	ProcessModel:
		'ProcessModel' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	ClassOfService:
		'ClassOfService' name=ID '{'
		('Description' description=STRING)? 
		'}'
	;	
	LocalValue:
		('owner' owner=[ServiceProvider])
		('value' value=INT)
	;
	// ------------------------ Organizational Objects ---------------------------------
	Service:
		'Service' name=ID ('{'
		('Description' description=STRING)?
		'}')?
	;		

	ServiceProvider:
		('ServiceProvider'|'Group') name=ID '{'
		('Description' description=STRING)?		
		('AssignTo' '{' (assignTo+=[ServiceProvider])+ '}')?
		('OutsourceFrom' '{' (outsourceFrom+=[ServiceProvider])+ '}')?		
		'TeamService'teamService=[Service]		
		('GovernanceStrategy' '{'governanceStrategy=[GovernanceStrategy]'}')?
	    ('Resources' '{' (resources+=Asset)+ '}')?
	    '}'
	;
	Asset: 
		'Resource' name=ID '{'
		('Description' description=STRING)?
		('SkillSet' '{' (skillSet+=Skill)+ '}')?
		'}'
	;	
	Skill:
		'Service' service=[Service]
		'Efficiency' efficiency=Double
	;		
	
	// ------------------------ WorkItem Repositories ---------------------------------------
	Repository:
		'Repository' type = [TaskType]
		'Profiles' '{'(profiles += WorkItemProfile)* '}'
		'end Repository'
	;
	WorkItemProfile:
		'WorkItem' name=ID '{'
		('Description' description=STRING)?
		('ProcessModel' processModel=[ProcessModel])?
		('References''{' (references+=WorkReference)+ '}')?
		('Decompositions' '{' (decompositions+=WorkDecomposition)+ '}')?
		('RequiredServices' (requiredServices+=[Service])+)?
		('Efforts' efforts=NumExpression)?
		('Value' value=NumExpression)?
		('ClassOfService' classOfService=[ClassOfService])?
		(allowAssignment ?= 'AssignmentAllowed')?
		(allowDiscard ?= 'DiscardAllowed')?
		'}'
	;
	WorkReference:
		'WorkItem' workItem = [WorkItemProfile]
		'Quantity' quantity = NumExpression
	;
	WorkDecomposition:
		'WorkItem' workItem = [WorkItemProfile]
		'Quantity' quantity = NumExpression
	;
	WorkPrecedency:
		'WorkItem' workItem = [WorkItemProfile]
	;
	WorkCausality:
		'WorkItem' workItem = [WorkItemProfile]
	;	
	// ------------------------ (Reserved Objects) ---------------------------------
	KanbanTaskModel:
		'WorkFlow' name=ID
		(caps+=Capability)+
		'end WorkFlow'
	;

	Capability:
		'capability' name=ID '{'
		('Description' description=STRING)?
		(reqs+=Requirement)+ 	
		'}'
	;
	Requirement:
		'requirement' name=ID '{' 
		 ('Description' description=STRING)?
		 ('workItems' '{' (rTasks+=[WorkItem])+ '}') 
		 ('workItemNetwork' (dependencies += CausalTrigger)*)?
		'}'
	;
	
	Entity:
		'entity' name=ID '{'
		('ServiceDirectory' sdname=ID '=' '['(serviceProvisions+=Provision)* ']')?
		(entityBehavior=Statemachine)
		'}'
	;
	
	Provision:
		'(' serviceName=[Service] ',' '{'(providers+=[ServiceProvider])* '}'')' 
	;
	
	
	Statemachine :
     {Statemachine}
	('events' 
		events+=Event+ 
	'end')?
	('activities' 
		commands+=Command+ 
	'end')?
	(states+=State)*
;

	Event:
		name=ID code=ID
	;
	
	Command:
		name=ID code=ID
	;
	
	State:
		'state' name=ID
			('actions' '{' actions+=[Command]+ '}')?
			(transitions+=Transition)*
		'end'
	;

	Transition:
		(event=[Event] '=>' state=[State]) | (event=[Event] '/' '[' (eventactions+=[Command])+ ']' '=>' state=[State])
	;
	
