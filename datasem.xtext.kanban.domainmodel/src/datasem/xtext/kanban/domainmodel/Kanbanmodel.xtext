grammar datasem.xtext.kanban.domainmodel.Kanbanmodel with org.eclipse.xtext.common.Terminals

generate kanbanmodel "http://www.xtext.datasem/kanban/domainmodel/Kanbanmodel"

	KanbanSchedulingSystem:
		'KSSModel' name=ID
			(TestItems += QualifiedName)?		
		'GovernanceModel'
			'ProcessModels'
			(ProcessModels += ProcessModel)+
			'end ProcessModels'
		    'GovernanceSearchStrategies'
		    (GovernanceSearchStrategies += Strategy)+
		    'end GovernanceSearchStrategies'
			'TaskPatterns'
			(TaskPatterns += TaskPattern)+
			(TaskTypes += TaskType)+
			'end TaskPatterns'
			'ValueFunctions'
			(ValueFunctions += ValueFunction)+
			'end ValueFunctions'			
		'end GovernanceModel'
		
		'OrganizationalModel'
			'ServiceTypes'
			(ServiceTypes += ServiceType)+
			'end ServiceTypes'
			'ServiceProviders'
			(ServiceProviders += ServiceProvider)+
			'end ServiceProviders'
		'end OrganizationalModel'
		
		'WorkItemNetworkModel'
			'Repositories'
			(Repositories += Repository)+
			'end Repositories'
			'WorkSources'
		    (WorkSources += WorkSource)+
		    'end WorkSources'
		    'WorkItems'
			(WorkItems += WorkItem)+
			'end WorkItems'
	//		(kssWorkFlow=KanbanTaskModel)
		'end WorkItemNetworkModel'
		
		'ExperimentSettings'
			'Replications' replications=INT
			'InterArrivalTime' interArrivalTime=INT	
		'end ExperimentSettings'
		
		'end KSSModel'
	;
	

	//
	QualifiedName:
		ID ('.' ID)*
	;
	Double:
		INT ('.' INT)?
	;
	NumExpression:		
		(numValue=Double)?	
		(distribution ?= 'Distribution:' numDist = Distribution)?
	;
	Parameter:
		Double|ID
	;
	Distribution:
		type = ID
		'['
		(parameters+=Parameter)*
		']'
	;
	// ------------------------ WorkItem Repositories ---------------------------------------
	Repository:
		'Repository' type = [TaskType]
		'Profiles' '{'(profiles += WorkItemProfile)* '}'
		'end Repository'
	;
	WorkItemProfile:
		'WorkItem' name=ID '{'
		('Description' description=STRING)?
		('ProcessModel' processModel=[ProcessModel])?
		('References''{' (references+=WorkReference)+ '}')?
		('Decompositions' '{' (decompositions+=WorkDecomposition)+ '}')?
		('RequiredServices' (requiredServices+=[ServiceType])+)?
		('Efforts' efforts=NumExpression)?
		('Value' value=NumExpression)?
		('ClassOfService' classOfService=ID)?
		(allowAssignment ?= 'AssignmentAllowed')?
		(allowDiscard ?= 'DiscardAllowed')?
		'}'
	;
	WorkReference:
		'WorkItem' workItem = [WorkItemProfile]
		'Quantity' quantity = NumExpression
	;
	WorkDecomposition:
		'WorkItem' workItem = [WorkItemProfile]
		'Quantity' quantity = NumExpression
	;
	WorkPrecedency:
		'WorkItem' workItem = [WorkItemProfile]
	;
	WorkCausality:
		'WorkItem' workItem = [WorkItemProfile]
	;
	// ------------------------ Governance Objects ---------------------------------
	TaskPattern:
		'TaskPattern' name=ID '{'
		('Description' description=STRING)?
		('Types' '{' (taskTypes+=[TaskType])+ '}')?
		'}'
	;
	TaskType:
		'TaskType' name=ID '{'
		('Description' description=STRING)?
		'}'
	;	
	ValueFunction:
		'ValueFunction' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	
	ProcessModel:
		'ProcessModel' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	
	Mechanism:
		'Mechanism' name=ID
		('Description' description=STRING)?
		('ProcessType' processtype=STRING)
		(Strategies+=Strategy)+
	;	
	Strategy: 
		'Strategy' name=ID '{'
		('Description' description=STRING)?
	   	WIAcceptanceRule=WIAcceptance
	    WISelectionRule=WISelection 
	    WIAssignmentRule=WIAssignment 
	    ResourceAllocationRule=ResourceAllocation 
	    ResourceOutsourcingRule=ResourceOutsourcing   
	    '}'
	;
	WIAcceptance:
		'WIAcceptance' name=ID '{'
		('Description' description=STRING)?		
		('BackLogLimit' backlogQLimit=INT)?
		('WIPLimit' readyQLimit=INT)?
		'}'
	;
	WISelection:
		'WISelection' name=ID '{'
		('Description' description=STRING)?		
		'}'
	;
	WIAssignment:
		'WIAssignment' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceAllocation:
		'ResourceAllocation' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	ResourceOutsourcing:
		'ResourceOutsourcing' name=ID '{'
		('Description' description=STRING)?
		'}'
	;
	
    // ------------------------ WorkItem Objects ---------------------------------
    WorkSource:
    	'WorkSource' name=ID '{'
    	('Description' description=STRING)?
    	('TargetUnits' '{' (targetUnits+=[ServiceProvider])+ '}')?
    	(assignmentRule=WIAssignment)?
    	'}'
    ;
//    WorkItemNetwork:
//    	'workItemNetwork' name=ID '{'
//    	('Description' description=STRING)?
//    	('workItems' '{' workItems+=WorkItem '}')
//    	'}'
//    ;
	WorkItem:
		'WorkItem' name=ID '{'
		('Profile' profile=[WorkItemProfile])?
		('Description' description=STRING)?
		('Pattern' pattern=[TaskPattern])?		
		('Type' patternType=[TaskType])?
		('Predecessors' '{' (pTasks+=[WorkItem])+ '}')?
		('Subtasks' '{' (sTasks+=[WorkItem])+ '}')?
		('CausalTriggers'(causalTriggers+=Causality)*)?
		('RequiredServices' (requiredServices+=[ServiceType])+)?
		('Efforts' efforts=Double)?
		('Value' value=Double)?
		('ClassOfService' classOfService=ID)?
		('WorkSource' workSource=[WorkSource])?
		('ArrivalTime' arrivalTime=INT)?
		('DueDate' dueDate=INT)?
		'}'
	;
	Causality:
		('=>'| '->')'{'(triggered+=[WorkItem])+'}'
		('AtProgress' atProgress=INT)?
		('OnProbability' onProbability=INT)?		
	;
	LocalValue:
		('owner' owner=[ServiceProvider])
		('value' value=INT)
	;
	
	// ------------------------ Organizational Objects ---------------------------------
	ServiceType:
		'ServiceType' name=ID ('{'
		('Description' description=STRING)?
		'}')?
	;	
	Service:
		'Service' name=ID ('{'
		('Description' description=STRING)?
		('Type' type=[ServiceType])
		('Efficiency' efficiency=NumExpression)?
		'}')?
	;	
	ServiceProvider:
		('ServiceProvider'|'Group') name=ID '{'
		('Description' description=STRING)?
		('SourceUnits' '{' (sourceUnits+=[ServiceProvider])+ '}')?
		('TargetUnits' '{' (targetUnits+=[ServiceProvider])+ '}')?
		('SubordinateUnits' '{' (subordinateUnits+=[ServiceProvider])+ '}')?		
		('Services' '{' (services+=Service)+ '}')?
		('GovernanceSearchStrategy' '{'
			'Default' defaultStrategy=[Strategy]
			('Specified' '{'
			(acceptanceRule=WIAcceptance)?
		    (selectionRule=WISelection)?
		    (assignmentRule=WIAssignment)?
		    (allocationRule=ResourceAllocation)?
		    (outsourcingRule=ResourceOutsourcing)?
		    '}')?
	    '}')?
	    ('Resources' '{' (resources+=Asset)+ '}')?
	    '}'
	;
	Asset: 
		'Resource' name=ID '{'
		('Quantity' quantity=INT)?
		('Description' description=STRING)?
		('Services' '{' (services+=Service)+ '}')?
		'}'
	;	
	
	
	
	// ------------------------ (Reserved Objects) ---------------------------------
	KanbanTaskModel:
		'WorkFlow' name=ID
		(caps+=Capability)+
		'end WorkFlow'
	;
	Capability:
		'capability' name=ID '{'
		('Description' description=STRING)?
		(reqs+=Requirement)+ 	
		'}'
	;
	Requirement:
		'requirement' name=ID '{' 
		 ('Description' description=STRING)?
		 ('workItems' '{' (rTasks+=[WorkItem])+ '}') 
		 ('workItemNetwork' (dependencies += Causality)*)?
		'}'
	;
	
	Entity:
		'entity' name=ID '{'
		('ServiceDirectory' sdname=ID '=' '['(serviceProvisions+=Provision)* ']')?
		(entityBehavior=Statemachine)
		'}'
	;
	
	Provision:
		'(' serviceName=[ServiceType] ',' '{'(providers+=[ServiceProvider])* '}'')' 
	;
	
	
	Statemachine :
     {Statemachine}
	('events' 
		events+=Event+ 
	'end')?
	('activities' 
		commands+=Command+ 
	'end')?
	(states+=State)*
;

Event:
	name=ID code=ID
;

Command:
	name=ID code=ID
;

State:
	'state' name=ID
		('actions' '{' actions+=[Command]+ '}')?
		(transitions+=Transition)*
	'end'
;

Transition:
	(event=[Event] '=>' state=[State]) | (event=[Event] '/' '[' (eventactions+=[Command])+ ']' '=>' state=[State])
;
	
