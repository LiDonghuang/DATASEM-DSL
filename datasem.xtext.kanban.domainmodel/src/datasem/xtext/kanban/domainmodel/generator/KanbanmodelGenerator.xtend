/*
 * generated by Xtext
 */
package datasem.xtext.kanban.domainmodel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import datasem.xtext.kanban.domainmodel.kanbanmodel.*
import java.util.Random

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class KanbanmodelGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
	fsa.generateFile("KSS-Scenario.xml", compile(resource))	
	}

	def compile(Resource res) '''
		«FOR km : res.allContents.toIterable.filter(KanbanSchedulingSystem)»
		<KSSModel>
		«km.name»
		
		<GovernanceModel>
			<GovernanceSearchStrategies>
				«FOR stg : res.allContents.toIterable.filter(Strategy)» 
				<Strategy>
					<Name>«stg.name»</Name>
					<Description>«stg.description»</Description>					
					<AcceptanceRule>«stg.getWIAcceptanceRule.name»</AcceptanceRule>
					<SelectionRule>«stg.getWISelectionRule.name»</SelectionRule>
					<AssignmentRule>«stg.getWIAssignmentRule.name»</AssignmentRule>
					<AllocationRule>«stg.getResourceAllocationRule.name»</AllocationRule>
					<OutsourcingRule>«stg.getResourceOutsourcingRule.name»</OutsourcingRule>
				</Strategy>
				«ENDFOR»
			</GovernanceSearchStrategies>
			<TaskPatterns>
				«FOR tp : res.allContents.toIterable.filter(TaskPattern)» 
				<TaskPattern>
					<Name>«tp.name»</Name>
					<Description>«tp.description»</Description>
					<Types>
						«FOR tt :tp.getTaskTypes()» 
						<Type>
						<Name>«tt.name»</Name>
						<Description>«tt.description»</Description>
						</Type>
						«ENDFOR»	
					</Types>	
				«ENDFOR»
				</TaskPattern>
			</TaskPatterns>
			<ValueFunctions>
				«FOR vf : res.allContents.toIterable.filter(ValueFunction)» 
				<ValueFunction>
					<Name>«vf.name»</Name>
					<Description>«vf.description»</Description>
				</ValueFunction>
				«ENDFOR»
			</ValueFunctions>
		</GovernanceModel>
		
		
		<OrganizationalModel>
			<ServiceTypes>
			«FOR stype : res.allContents.toIterable.filter(ServiceType)» 
				«printServiceType(stype)»
			«ENDFOR»
			</ServiceTypes>
			<ServiceProvidersList>
			«FOR sp : res.allContents.toIterable.filter(ServiceProvider)»  
				«printServiceProvider(sp)»
			«ENDFOR»
			</ServiceProvidersList>
		</OrganizationalModel>
		
		
		<WorkItemRepositories>
		«FOR repository : res.allContents.toIterable.filter(Repository)»
			«printRepository(repository)»
		«ENDFOR»
		</WorkItemRepositories>
		
		<WorkItemNetworkModel>
		«FOR ws : res.allContents.toIterable.filter(WorkSource)»
			«printWorkSource(ws)»
		«ENDFOR»		
		«FOR wi : res.allContents.toIterable.filter(WorkItem)»
			«printWorkItem(wi)»
		«ENDFOR»
		</WorkItemNetworkModel>
		
		
	«ENDFOR»
	</KSSModel>
	'''
	
	def printNumExpression(NumExpression e) '''
		«IF e!=null»		
			«IF e.isDistribution()»
			<Distribution>
			<Type>«e.numDist.getType()»</Type>
			«FOR p : e.numDist.getParameters()»
			<Parameter>«p»</Parameter>
			«ENDFOR»
			</Distribution>					
			«ELSE»			
			<Value>«e.numValue»</Value>
			«ENDIF»	
		«ENDIF»
	'''
	
//	def sampleDistribution(NumExpression e) {
//		val value = 0.00
//		if (e.numDist.getType().matches("normal")) {}
//			val mean = Double.parseDouble(e.numDist.getParameters.get(0))
//			val std = Double.parseDouble(e.numDist.getParameters.get(1))
//			val rand = new Random()
//			value = mean+std*rand.nextGaussian()
//		}
//		else {value = 0.00}
//		return value
//	}
	
	def printServiceType(ServiceType stype) '''
			<ServiceType>
				<Name>«stype.name»</Name>
				<Description>«stype.description»</Description>
			</ServiceType>	
	'''
	
	def printService(Service s) '''
			<Service>
				<Name>«s.name»</Name>
				<Description>«s.description»</Description>
				<Type>«s.getType().name»</Type>
				<Efficiency>
					«printNumExpression(s.efficiency)»
				</Efficiency>
			</Service>
	'''
	
	def printResource(Asset r) '''
			<Resource>
				<Name>«r.name»</Name>
				<Description>«r.description»</Description>
				<Services>
				«FOR s : r.getServices()» 
					«printService(s)»
				«ENDFOR»	
				</Services>	
			</Resource>	
	'''
	
	def printServiceProvider(ServiceProvider sp) '''
			<ServiceProvider>
				<Name>«sp.name»</Name>
				<Description>«sp.description»</Description>
				<SourceUnits>
				«FOR su : sp.getSourceUnits()»
					<SourceUnit>«su.name»</SourceUnit>
				«ENDFOR»
				</SourceUnits>
				<TargetUnits>
				«FOR tu : sp.getTargetUnits()»
					<TargetUnit>«tu.name»</TargetUnit>
				«ENDFOR»
				</TargetUnits>
				<SubordinateUnits>
				«FOR subu : sp.getSubordinateUnits()» 
					<SubordinateUnit>«subu.name»</SubordinateUnit>
				«ENDFOR»
				</SubordinateUnits>	
				<Services>
				«FOR s : sp.getServices()» 
					«printService(s)»
				«ENDFOR»	
				</Services>	
				<GovernanceSearchStrategy>						
					<Default>«sp.getDefaultStrategy().getName()»</Default>
					<Specified>
					«IF sp.getAcceptanceRule() != null»
						<AcceptanceRule>«sp.getAcceptanceRule().name»</AcceptanceRule>						
					«ELSE»
						<AcceptanceRule>«"null"»</AcceptanceRule>
					«ENDIF»
					«IF sp.getSelectionRule() != null»
						<SelectionRule>«sp.getSelectionRule().name»</SelectionRule>						
					«ELSE»
						<SelectionRule>«"null"»</SelectionRule>
					«ENDIF»
					«IF sp.getAssignmentRule() != null»
						<AssignmentRule>«sp.getAssignmentRule().name»</AssignmentRule>						
					«ELSE»
						<AssignmentRule>«"null"»</AssignmentRule>
					«ENDIF»
					«IF sp.getAllocationRule() != null»
						<AllocationRule>«sp.getAllocationRule().name»</AllocationRule>						
					«ELSE»
						<AllocationRule>«"null"»</AllocationRule>
					«ENDIF»
					«IF sp.getOutsourcingRule() != null»
						<OutsourcingRule>«sp.getOutsourcingRule().name»</OutsourcingRule>						
					«ELSE»
						<OutsourcingRule>«"null"»</OutsourcingRule>
					«ENDIF»
					</Specified>
				</GovernanceSearchStrategy>	
				<Resources>
				«FOR r : sp.getResources()» 
					«printResource(r)»
				«ENDFOR»
				</Resources>	
			</ServiceProvider>
	'''
	def printWorkSource(WorkSource ws) '''
			<WorkSource>
				<Name>«ws.name»</Name>
				<Description>«ws.description»</Description>
				<TargetUnits>
				«FOR tu : ws.getTargetUnits()»
					<TargetUnit>«tu.name»</TargetUnit>
				«ENDFOR»
				</TargetUnits>
				«IF ws.getAssignmentRule() != null»
				<AssignmentRule>«ws.getAssignmentRule().name»</AssignmentRule>						
				«ELSE»
				<AssignmentRule>«"null"»</AssignmentRule>
				«ENDIF»				
			</WorkSource>
	'''
	
	def printRepository(Repository repository) '''
			<Repository>
				<Type>«repository.type.name»</Type>
				<Profiles>
				«FOR p : repository.getProfiles()» 
					«printWorkItemProfile(p)»
				«ENDFOR»
				</Profiles>
				<Rules> </Rules>
			</Repository>
			'''
			
	def printWorkItemProfile(WorkItemProfile p) '''
			<Profile>
				<Name>«p.name»</Name>
				<Description>«p.name»</Description>
				<References> 
				«FOR wc : p.getReferences()»  
					«printWorkReference(wc)»
				«ENDFOR»
				</References>
				<Decompositions> 
				«FOR wd : p.getDecompositions()»  
					«printWorkDecomposition(wd)»
				«ENDFOR»
				</Decompositions>
				<RequiredServices>
				«FOR rs : p.getRequiredServices()»	
				<ServiceType>«rs.name»</ServiceType>
				«ENDFOR»
				<RequiredServices>
				<ClassOfService> 
				</ClassOfService>
				<Efforts>
					«printNumExpression(p.efforts)»
				</Efforts>
				<Value>
					«printNumExpression(p.value)»
				</Value>
				<Rules> </Rules>
			</Profile>
	'''
	
	def printWorkReference(WorkReference wr) '''
			<Reference>
				<WorkItem>«wr.workItem.name»</WorkItem>
				<Quantity>
					«printNumExpression(wr.quantity)»
				</Quantity>
			</Reference>
	'''	
	
	def printWorkDecomposition(WorkDecomposition wd) '''
			<Decomposition>
				<WorkItem>«wd.workItem.name»</WorkItem>
				<Quantity>
					«printNumExpression(wd.quantity)»
				</Quantity>
			</Decomposition>
	'''	
	
	def printWorkItem(WorkItem wi) '''
			<WorkItem>
				<Name>«wi.name»</Name>
				<Profile>«wi.profile.name»</Profile>
				<Description>«wi.description»</Description>
				<Pattern>«wi.getPattern().name»</Pattern>
				<Type>«wi.getPatternType.name»</Type>					
				<Predecessors>
				«FOR ptask : wi.getPTasks()»
					<Predecessor>«ptask.name»</Predecessor>
				«ENDFOR»	
				</Predecessors>
				<Subtasks>
				«FOR stask : wi.getSTasks()»				
					<Subtask>«stask.name»</Subtask>
				«ENDFOR»	
				</Subtasks>
				<Causalities>
				«FOR cs : wi.getCausalTriggers()»
					<Causality>
					«FOR ttask : cs.getTriggered()»
						<Triggered>«ttask.name»</Triggered>
					«ENDFOR»
						<AtProgress>«cs.getAtProgress»</AtProgress>
						<OnProbability>«cs.getOnProbability»</OnProbability>
					</Causality>
				«ENDFOR»	
				</Causalities>
				<RequiredServices>
				«FOR rs : wi.getRequiredServices()»	
				<ServiceType>«rs.name»</ServiceType>
				«ENDFOR»
				</RequiredServices>
				<ClassOfService>«wi.classOfService»</ClassOfService>
				<Efforts>«wi.efforts»</Efforts>
				<Value>«wi.value»</Value>	
				«IF wi.getWorkSource() != null» 
				<WorkSource>«wi.getWorkSource().name»</WorkSource>
				«ELSE»
				<WorkSource>«"null"»</WorkSource>
				 «ENDIF»
				<ArrivalTime>«wi.arrivalTime»</ArrivalTime>
				<DueDate>«wi.dueDate»</DueDate>
			</WorkItem>
	'''

}

