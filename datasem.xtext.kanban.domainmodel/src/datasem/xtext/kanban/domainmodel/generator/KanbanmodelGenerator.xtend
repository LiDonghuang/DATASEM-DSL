/*
 * generated by Xtext
 */
package datasem.xtext.kanban.domainmodel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import datasem.xtext.kanban.domainmodel.kanbanmodel.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class KanbanmodelGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
	fsa.generateFile("KSS-Scenario.xml", compile(resource))	
	}
	
	def compile(Resource res) '''
		<?xml version="1.0"?>
		«FOR km : res.allContents.toIterable.filter(KanbanSchedulingSystem)»
		<KSSModel>
			<ExperimentSettings>
				<Replications>«km.getReplications»</Replications>
				<InterArrivalTime>«km.getInterArrivalTime»</InterArrivalTime>
			</ExperimentSettings>
		«ENDFOR»
		<GovernanceModel>
			<GovernanceSearchStrategies>
				«FOR stg : res.allContents.toIterable.filter(Strategy)» 
				<Strategy>
					<name>«stg.name»</name>
					<Description>«stg.description»</Description>					
					<acceptanceRule>«stg.getWIAcceptanceRule.name»</acceptanceRule>
					<selectionRule>«stg.getWISelectionRule.name»</selectionRule>
					<assignmentRule>«stg.getWIAssignmentRule.name»</assignmentRule>
					<allocationRule>«stg.getResourceAllocationRule.name»</allocationRule>
					<outsourcingRule>«stg.getResourceOutsourcingRule.name»</outsourcingRule>
				</Strategy>
				«ENDFOR»
			</GovernanceSearchStrategies>
			<TaskPatterns>
				«FOR tp : res.allContents.toIterable.filter(TaskPattern)» 
				<TaskPattern>
					<name>«tp.name»</name>
					<Description>«tp.description»</Description>
					<Types>
						«FOR tt :tp.getTaskpatternTypes()» 
						<Type>
						<name>«tt.name»</name>
						<Description>«tt.description»</Description>
						</Type>
						«ENDFOR»	
					</Types>	
				«ENDFOR»
				</TaskPattern>
			</TaskPatterns>
			<ValueFunctions>
				«FOR vf : res.allContents.toIterable.filter(ValueFunction)» 
				<ValueFunction>
					<name>«vf.name»</name>
					<Description>«vf.description»</Description>
				</ValueFunction>
				«ENDFOR»
			</ValueFunctions>
		</GovernanceModel>
		
		
		<OrganizationalModel>
			<ServiceTypes>
				«FOR stype : res.allContents.toIterable.filter(ServiceType)» 
				<ServiceType>
					<name>«stype.name»</name>
					<Description>«stype.description»</Description>
				</ServiceType>	
				«ENDFOR»
			</ServiceTypes>
			<ServiceProvidersList>
			«FOR t : res.allContents.toIterable.filter(ServiceProvider)»  
				<ServiceProvider>
					<name>«t.name»</name>
					<Description>«t.description»</Description>
					<sourceUnits>
					«FOR su : t.getSourceUnits()»
						<sourceUnit>«su.name»</sourceUnit>
					«ENDFOR»
					</sourceUnits>
					<targetUnits>
					«FOR tu : t.getTargetUnits()»
						<targetUnit>«tu.name»</targetUnit>
					«ENDFOR»
					</targetUnits>
					<subordinateUnits>
					«FOR subu : t.getSubordinateUnits()» 
						<subordinateUnit>«subu.name»</subordinateUnit>
					«ENDFOR»
					</subordinateUnits>	
					<services>
					«FOR s : t.getServices()» 
						<service>
							<name>«s.name»</name>
							<Description>«s.description»</Description>
							<Type>«s.getServiceType().name»</Type>
							<Efficiency>«s.efficiency»</Efficiency>
						</service>
					«ENDFOR»	
					</services>	
					<governanceSearchStrategy>						
						<default>«t.getDefaultStrategy().getName()»</default>
						<specified>
						«IF t.getAcceptanceRule() != null»
							<acceptanceRule>«t.getAcceptanceRule().name»</acceptanceRule>						
						«ELSE»
							<acceptanceRule>«"null"»</acceptanceRule>
						«ENDIF»
						«IF t.getSelectionRule() != null»
							<selectionRule>«t.getSelectionRule().name»</selectionRule>						
						«ELSE»
							<selectionRule>«"null"»</selectionRule>
						«ENDIF»
						«IF t.getAssignmentRule() != null»
							<assignmentRule>«t.getAssignmentRule().name»</assignmentRule>						
						«ELSE»
							<assignmentRule>«"null"»</assignmentRule>
						«ENDIF»
						«IF t.getAllocationRule() != null»
							<allocationRule>«t.getAllocationRule().name»</allocationRule>						
						«ELSE»
							<allocationRule>«"null"»</allocationRule>
						«ENDIF»
						«IF t.getOutsourcingRule() != null»
							<outsourcingRule>«t.getOutsourcingRule().name»</outsourcingRule>						
						«ELSE»
							<outsourcingRule>«"null"»</outsourcingRule>
						«ENDIF»
						</specified>
					</governanceSearchStrategy>	
					<resources>
					«FOR r : t.getResources()» 
						<resource>
							<name>«r.name»</name>
							<Description>«r.description»</Description>
							<services>
							«FOR s : r.getServices()» 
							<service>
								<name>«s.name»</name>
								<Description>«s.description»</Description>
								<Type>«s.getServiceType().name»</Type>
								<Efficiency>«s.efficiency»</Efficiency>
							</service>
							«ENDFOR»	
							</services>	
						</resource>	
					«ENDFOR»
					</resources>	
				</ServiceProvider>
			«ENDFOR»
			</ServiceProvidersList>
		</OrganizationalModel>
		
		<WorkItemNetworkModel>
		«FOR ws : res.allContents.toIterable.filter(WorkSource)»
			<workSource>
				<name>«ws.name»</name>
				<Description>«ws.description»</Description>
				<targetUnits>
				«FOR tu : ws.getTargetUnits()»
					<targetUnit>«tu.name»</targetUnit>
				«ENDFOR»
				</targetUnits>
				«IF ws.getAssignmentRule() != null»
				<assignmentRule>«ws.getAssignmentRule().name»</assignmentRule>						
				«ELSE»
				<assignmentRule>«"null"»</assignmentRule>
				«ENDIF»				
			</workSource>
		«ENDFOR»		
		«FOR wi : res.allContents.toIterable.filter(WorkItem)»
			<workItem>
				<name>«wi.name»</name>
				<Profile>«wi.profile.name»</Profile>
				<Description>«wi.description»</Description>
				<Pattern>«wi.getPattern().name»</Pattern>
					<Type>«wi.getPatternType.name»</Type>					
				<predecessors>
				«FOR ptask : wi.getPTasks()»
					<predecessor>«ptask.name»</predecessor>
				«ENDFOR»	
				</predecessors>
				<subtasks>
				«FOR stask : wi.getSTasks()»				
					<subtask>«stask.name»</subtask>
				«ENDFOR»	
				</subtasks>
				<causalities>
				«FOR cs : wi.getCausalTriggers()»
					<causality>
					«FOR ttask : cs.getTriggered()»
						<triggered>«ttask.name»</triggered>
					«ENDFOR»
						<atProgress>«cs.getTProgress»</atProgress>
						<onProbability>«cs.getTProbability»</onProbability>
					</causality>
				«ENDFOR»	
				</causalities>
				«FOR rs : wi.getReqSpecialties()»	
				<servicesRequired>«rs.name»</servicesRequired>
				«ENDFOR»
				<baseEfforts>«wi.befforts»</baseEfforts>
				<baseValue>«wi.bvalue»</baseValue>				
«««				«IF wi.befforts!=null»		
«««					«IF wi.befforts.isDistribution()»
«««					<baseEfforts>
«««						<distribution>
«««							<type>«wi.befforts.numDist.getType()»</type>
«««							«FOR p : wi.befforts.numDist.getParameters()»
«««							<parameter>«p»</parameter>
«««							«ENDFOR»
«««						</distribution>
«««					</baseEfforts>						
«««					«ELSE»			
«««					<baseEfforts>«wi.befforts.numValue»</baseEfforts>
«««					«ENDIF»	
«««				«ELSE»
«««					<baseEfforts>0</baseEfforts>
«««				«ENDIF»				
«««				«IF wi.bvalue!=null»		
«««					«IF wi.bvalue.isDistribution()»
«««					<baseValue>
«««						<distribution>
«««							<type>«wi.bvalue.numDist.getType()»</type>
«««							«FOR p : wi.bvalue.numDist.getParameters()»
«««							<parameter>«p»</parameter>
«««							«ENDFOR»
«««						</distribution>
«««					</baseValue>						
«««					«ELSE»			
«««					<baseValue>«wi.bvalue.numValue»</baseValue>
«««					«ENDIF»	
«««				«ELSE»
«««					<baseValue>0</baseValue>
«««				«ENDIF»	
				<classOfService>«wi.COS»</classOfService>
				«IF wi.getWItemSource() != null» 
				<WorkSource>«wi.getWItemSource().name»</WorkSource>
				«ELSE»
				<WorkSource>«"null"»</WorkSource>
                 «ENDIF»
				<arrivalTime>«wi.arrtime»</arrivalTime>
				<dueDate>«wi.duedate»</dueDate>
			</workItem>
		«ENDFOR»
		</WorkItemNetworkModel>
		
«««		«FOR kanbanWFlow : res.allContents.toIterable.filter(KanbanTaskModel)»<KanbanWorkFlow>
«««				<capabilities>
«««				«FOR wfcap : kanbanWFlow.getCaps()»
«««					<capability>
«««						<name>«wfcap.name»</name>
«««						<requirements>
«««						«FOR wfreq : wfcap.getReqs()»
«««							<requirement>
«««								<name>« wfreq.name»</name>
«««								<tasks>
«««								«FOR wi : wfreq.getRTasks()»
«««								<task>
«««									<name>«wi.name»</name>										
«««								</task>
«««								«ENDFOR»
«««								</tasks>
«««								<process>
«««								«FOR wfpr : wfreq.getDependencies()»
«««								<mechanism>
«««									<sourceTask>«wfpr.getSourceTask().name»</sourceTask>	
«««									<targetTask>«wfpr.getTargetTask().name»</targetTask>
«««								</mechanism>
«««								«ENDFOR»
«««								</process>
«««							</requirement>
«««						«ENDFOR»
«««						</requirements>
«««					</capability>
«««				«ENDFOR»
«««				</capabilities>
«««			«ENDFOR»
«««		</KanbanWorkFlow>
		

		
		</KSSModel>
	'''
}
